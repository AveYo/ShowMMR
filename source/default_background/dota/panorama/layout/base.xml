<root>
	<styles>
		<include src="s2r://panorama/styles/base.vcss_c" />
	</styles>

	<!--	ShowMMR dashboard mod by AveYo, 2023.08.22	-->
	<scripts>
		<include src="s2r://panorama/scripts/sequence_actions.vts_c" />
	</scripts>
	<script><![CDATA[
		'use strict';
		const core = $('#Dashboard').FindChildInLayoutFile('DashboardCore');  /// common ancestor with the profile page

		function ShowMMR_Init(old_state, new_state) {
			if (old_state !== 1 || new_state !== 3)
				return; /// Dashboard-only ( dota_game_ui_state_loading_screen 1 -> dota_game_ui_state_dashboard 3 )

			if (core.Data.show == null)
				core.Data.show = {};

			if (core.Data.history == null) {
				core.Data.history = {};
				let history = CustomNetTables.GetAllTableValues('ShowMMR_history');
				for (var i = 0; i < history.length; ++i)
				{
					let kv = history[i]['value'];
					if (kv == null)
						continue;
					for (let [k, v] of Object.entries(kv)) {core.Data.history[parseInt(k)] = [v['1'], v['2']];}
				}
			}

			if (core.Data.cfg == null)
				core.Data.cfg = {};

			if (core.Data.mmr == null || core.Data.mmr < 1 || core.Data.cfg.RankUpdated == true) {
				core.Data.mmr = -1;
				core.Data.cfg.RankUpdated = false;
				ShowMMR_Refresh();
			}
		}

		function ShowMMR_Refresh() {
			if (core.Data.cfg == null)
				core.Data.cfg = {};

			if (core.Data.cfg.Refreshing === true)
				return; /// ignore other requests while running

			core.Data.cfg.Refreshing = true;

			/// MMR Number - must load the HeroStatsPage once to grab it
			let stats = core; let retries = 100; // let nav = true; /// change: always nav once to force a refresh
			let queue = new RunSequentialActions();
			queue.actions.push( new DispatchEventAction('DOTAEnsureRecentGamesLoaded', false) );
			queue.actions.push( new DispatchEventAction('DOTAShowProfileHeroStatsPage', core) );
			queue.actions.push( new WaitForConditionAction( function() {
				let pages = core.FindChild('DashboardForeground').FindChild('DashboardPages');
				for ( let i = 0; i < pages.GetChildCount(); ++i ) {
					let found = pages.GetChild(i);
					if (found.paneltype == 'DOTAProfileHeroStatsPage')
						stats = found;
				}
				return (stats.paneltype == 'DOTAProfileHeroStatsPage');
			}));
			queue.actions.push( new WaitForConditionAction( function() {
				core.Data.mmr =  -1;
				if (stats.BHasClass('MMRCalibrated'))
					core.Data.mmr = parseInt($.Localize('#ranked_mmr_value', stats).replaceAll(/\D+/g, '')) || -1;
				if (core.Data.mmr == -1)
					--retries;
				if (retries <= 0 || core.Data.mmr > -1) {
					RunSingleAction(new DispatchEventAction('DOTANavigateBack', core));
					return true;
				}
				return false;
			}));
			queue.actions.push( new RunFunctionAction( function() {
				core.Data.cfg.Refreshing = false;
				if (Game.GameStateIsAfter(0))
					return; /// forward event is Dashboard-only
				GameEvents.SendCustomGameEventToServer('ShowMMR_Refresh', {'mmr': core.Data.mmr});
			}));
			RunSingleAction(queue);
		}

		function ShowMMR_DOTARankUpdated() {
			if (core.Data.cfg == null)
				core.Data.cfg = {};

			core.Data.cfg.RankUpdated = true;
			if (core.Data.mmr !== null && core.Data.mmr < 1)
				ShowMMR_Init(1, 3); //ShowMMR_Refresh();
		}

		function ShowMMR_RecentDataUpdated(t, k, v) {
			core.Data.history[parseInt(k)] = [v['1'], v['2']];
		}

		$.RegisterForUnhandledEvent('DOTAGameUIStateChanged', ShowMMR_Init)
		$.RegisterForUnhandledEvent('DOTARankUpdated', ShowMMR_DOTARankUpdated);
		$.RegisterForUnhandledEvent('DOTAGameAccountClientUpdated', ShowMMR_DOTARankUpdated);
		$.RegisterForUnhandledEvent('DOTALastMatchUpdated', ShowMMR_DOTARankUpdated);
		$.RegisterForUnhandledEvent('DOTAMatchSignOutCompleted', ShowMMR_DOTARankUpdated);
		CustomNetTables.SubscribeNetTableListener('ShowMMR_update', ShowMMR_RecentDataUpdated);
	]]></script>

	<Panel class="WindowRoot" hittest="false">
		<DOTADashboard id="Dashboard" />
	</Panel>
</root>
